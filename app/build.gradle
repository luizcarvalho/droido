buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}
apply plugin: 'android'

allprojects {
    repositories {
        mavenCentral()
    }
}


repositories {
    mavenCentral()
}

android {
    compileSdkVersion 19
    buildToolsVersion '19.1.0'
    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
        testApplicationId 'br.com.redrails.torpedos.test'
    }
    signingConfigs {
        debug {
            storeFile file('../extra/rr-release-key.keystore')
            storePassword 'swordfish'
            keyAlias 'redrails'
            keyPassword 'swordfish'
        }
        release {
            storeFile file('../extra/rr-release-key.keystore')
            storePassword 'swordfish'
            keyAlias 'redrails'
            keyPassword 'swordfish'
        }
    }
    buildTypes {
        release {
            runProguard true
            proguardFile getDefaultProguardFile('proguard-project.txt')
            signingConfig signingConfigs.release
            debuggable false
        }
        debug {
            signingConfig signingConfigs.debug
            debuggable true
        }
    }
    productFlavors {
    }
    lintOptions {
        abortOnError false
    }
}


dependencies {
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.android.support:support-v4:+'
    compile files('src/main/libs/libGoogleAnalyticsServices.jar')
    compile files('src/main/libs/Parse-1.4.3.jar')
    compile 'com.google.android.gms:play-services:+'
}

task getHomeDir << {
    println gradle.gradleHomeDir
}/*
task addTest {
    def src = ['src/test/java']
    def file = file("app.iml")

    doLast {
        try {
            def parsedXml = (new XmlParser()).parse(file)
            def node = parsedXml.component[1].content[0]
            src.each {
                def path = 'file://$MODULE_DIR$/' + "${it}"
                def set = node.find { it.@url == path }
                if (set == null) {
                    new Node(node, 'sourceFolder', ['url': 'file://$MODULE_DIR$/' + "${it}", 'isTestSource': "true"])
                    def writer = new StringWriter()
                    new XmlNodePrinter(new PrintWriter(writer)).print(parsedXml)
                    file.text = writer.toString()
                }
            }
        } catch (FileNotFoundException e) {
            // nop, iml not found
        }
    }
}

// always do the addtest on prebuild
gradle.projectsEvaluated {
    preBuild.dependsOn(addTest)
}

*/

